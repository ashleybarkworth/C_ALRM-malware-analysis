import requests
import os
import time
import argparse
import json
import analyze as a
from configparser import ConfigParser

api_url = 'https://www.hybrid-analysis.com/api/v2/'

session = requests.Session()


def write_to_file(data):
    with open('Hybrid.json', 'w') as f:
        json.dump(data, f, sort_keys=False, indent=4)
    return os.path.realpath(f.name)


def get_sandbox_analysis(filepath):
    with open(filepath, 'rb') as f:
        # First step: submit file to sandbox
        submit_endpoint = ''.join([api_url, 'submit/file'])
        data = {'environment_id': 100}  # TODO: remove hardcoded, let user specify
        submit_response = session.post(submit_endpoint, files={'file': f}, data=data)
        print(submit_response.json())
        # if True:
        if submit_response.status_code == 201:
            submit_json = submit_response.json()
            job_id = submit_json['job_id']

            print(f'Submitted file to sandbox. Job ID {job_id}')
            print('Waiting for analysis to finish...')

            # Second step: check whether analysis has completed
            state_endpoint = ''.join([api_url, 'report/', job_id, '/state'])
            state_response = session.get(state_endpoint)
            state_json = state_response.json()
            state = state_json['state']

            while state not in ['SUCCESS', 'PARTIAL_SUCCESS']:
                print('Not ready yet. Retrying in 5 seconds...')
                time.sleep(5)
                state_response = session.get(state_endpoint)
                state_json = state_response.json()
                state = state_json['state']

            retalated_reports= state_json['related_reports']
            count= len(retalated_reports)
            listSummaryJson = {}

            if retalated_reports:
                reportCount = 1
                for i in retalated_reports:
                    report_id=i['report_id']
                    print(report_id)
                    summary_endpoint = ''.join([api_url, 'report/', report_id, '/summary'])
                    summary_response = session.get(summary_endpoint)
                    summary_json = summary_response.json()
                    listSummaryJson[reportCount] = summary_json
                    print(summary_json)
                    reportCount = reportCount+1
                output = write_to_file(listSummaryJson)
                return (output)
                
            else:
                # Third step: get summary of sandbox analysis
                summary_endpoint = ''.join([api_url, 'report/', job_id, '/summary'])
                summary_response = session.get(summary_endpoint)
                summary_json = summary_response.json()
                output = write_to_file(summary_json)
                return (output)

            print('ANALYSIS COMPLETE')
        else:
            print(f'Error: {submit_response.status_code}')


def establish_connection():
    config = ConfigParser()
    config.read('../../config.ini')
    api_key = config['hybrid']['api_key']

    print('Establishing connection...')
    headers = {'api-key': api_key, 'user-agent': 'Falcon Sandbox'}
    session.headers.update({'api-key': api_key, 'user-agent': 'Falcon Sandbox'})

    # Check that connection is successful
    endpoint = ''.join([api_url, 'key/current'])
    response = session.get(api_url + 'key/current', headers=headers)
    response_json = response.json()

    if response.status_code == 200:
        name, key = response_json['user']['name'], response_json['api_key']
        print(f'Successfully connected with {name}\'s API key {key}')
        

def controller(inputFile, reportType):

    establish_connection()
    outputFilePath = get_sandbox_analysis(inputFile)
    output = a.startAnalysis(outputFilePath,reportType)
    return output